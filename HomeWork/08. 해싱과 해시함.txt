1. 해싱과 해시함수에 대한 원리, 효율 구하기
1-1 해싱의 원리 : 키 값을 해시 함수(Hash function)으로 해싱하여 해시테이블의 특정 위치로 직접 엑세스하도록 만든 방식이다.
				+ 해시 함수(Hash Function)의 결과물이며, 저장소(bucket, slot)에서 값(value)과 매칭되어 저장된다.

1-2 해싱함수의 효율 : 키(key)를 해시(hash)로 바꿔주는 역할을 한다.
다양한 길이를 가지고 있는 키(key)를 일정한 길이를 가지는 해시(hash)로 변경하여 저장소를 효율적으로 운영할 수 있도록 도와준다.

시간복잡도는
<해시테이블의 시간복잡도>
접근			탐색			삽입			삭제
X			O(1)		O(1)		O(1)

접근은 할 수 없지만 다른 탐색, 삽입, 삭제의 면에서는 Big-O의 1만큼 빠르기 때문에
효율이 굉장이 높다고 볼 수 있습니다.

2.해시테이블의 충동과 충돌해결방안
2-1 Open Addressing(개방주소법)이 있다.
Open Addressing개방주소법이란 해시 충돌이 발생하면 테이블 내의 새로운 주소를 탐사(Probe) 한 후, 
비어있는 곳에 충돌된 데이터를 입력하는 방식이다. 해시함수를 거쳐서 나온 인덱스에 데이터가
이미 있으면, 다른 인덱스에 데이터를 저장하는 의미로 개방주소라고 한다.

2-2 Separate Chaining(Chaining체이닝)이 있다.
Chaining체이닝은 데이터값이 같은 해시테이블에 접근되어 중복저장이 일어나는 상황이 일어
나지 않게 하기 위해서 장하려는 해시테이블에 이미 같은 키값의 데이터가 있다면 LinkedList
노드를 추가하여 다음 노드를 가르키는 방식으로 구현하는 것입니다.